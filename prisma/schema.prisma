// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    favorite      Favorite[]
    recipe        Recipe[]
    recipeRating  RecipeRating[]
    userRole      UserRole[]
}

model UserRole {
    userId String
    user   User   @relation(fields: [userId], references: [id])
    role   Role

    @@unique([userId, role])
}

enum Role {
    ADMIN
    MEMBER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Recipe {
    id              String           @id @default(cuid())
    title           String
    description     String
    creationDate    DateTime         @default(now())
    lastUpdated     DateTime?        @updatedAt
    servings        Int
    calories        Float?
    imageUrl        String?
    userId          String
    cookingTime     CookingTime?
    favorite        Favorite[]
    nutrients       Nutrients?
    // image        File?            @relation(fields: [imageId], references: [id])
    user            User             @relation(fields: [userId], references: [id])
    categories      RecipeCategory[]
    recipeRatings   RecipeRating[]
    steps           RecipeSteps[]
    RecipeRatingAvg RecipeRatingAvg?

    @@index([id])
    @@index([title, description])
}

model RecipeRating {
    value     Float
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    recipeId  String
    userId    String
    recipe    Recipe    @relation(fields: [recipeId], references: [id])
    user      User      @relation(fields: [userId], references: [id])

    @@unique([recipeId, userId])
    @@index([recipeId, userId])
}

model RecipeRatingAvg {
    recipeId String @unique
    value    Float
    count    Int
    recipe   Recipe @relation(fields: [recipeId], references: [id])

    @@index([recipeId])
}

model CookingTime {
    value    Float
    unit     String
    recipeId String @unique
    recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Category {
    id             String           @id @default(cuid())
    name_pl        String           @unique
    name_en        String           @unique
    recipeCategory RecipeCategory[]
}

model RecipeCategory {
    recipeId   String
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    recipe     Recipe   @relation(fields: [recipeId], references: [id])

    @@unique([recipeId, categoryId])
    @@index([recipeId])
}

model Nutrients {
    id       String @id @default(cuid())
    fat      Float?
    protein  Float?
    carbs    Float?
    recipeId String @unique
    recipe   Recipe @relation(fields: [recipeId], references: [id])

    @@index([recipeId])
}

model Favorite {
    recipeId String
    userId   String
    Recipe   Recipe @relation(fields: [recipeId], references: [id])
    User     User   @relation(fields: [userId], references: [id])

    @@unique([recipeId, userId])
    @@index([recipeId, userId])
}

// model File {
//     id       String   @id @default(cuid())
//     filename String
//     path     String
//     mimetype String
//     Recipe   Recipe[]

//     @@index([id])
// }

model RecipeSteps {
    recipeId String
    steps    String
    recipe   Recipe @relation(fields: [recipeId], references: [id])

    @@unique([recipeId])
    @@index([recipeId])
}
